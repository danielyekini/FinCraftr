name: Release

on:
  release:
    types: [published]

jobs:
  # Build wheels for multiple platforms
  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up CMake
      uses: jwlawson/actions-setup-cmake@v1.14
      with:
        cmake-version: '3.20'

    - name: Install cibuildwheel
      run: python -m pip install cibuildwheel

    - name: Build wheels
      run: python -m cibuildwheel --output-dir wheelhouse
      env:
        # Build for Python 3.8-3.12
        CIBW_BUILD: "cp38-* cp39-* cp310-* cp311-* cp312-*"
        # Skip 32-bit builds, musllinux, and problematic Python 3.8 on Windows
        CIBW_SKIP: "*-win32 *-musllinux_* cp38-win_amd64"
        # Ensure CMake and ninja are available
        CIBW_BEFORE_BUILD: "pip install cmake ninja pybind11"
        # Test the built wheels with error handling
        CIBW_TEST_COMMAND: "python -c 'try: import fincraftr as fc; print(\"OK:\", fc.return_simple(105, 100)); except Exception as e: print(\"ERROR:\", e); exit(1)'"

    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}
        path: ./wheelhouse/*.whl

  # Build source distribution
  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build

    - name: Build source distribution
      run: python -m build --sdist

    - name: Upload sdist
      uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: dist/*.tar.gz

  # Publish to PyPI
  publish-pypi:
    name: Publish to PyPI
    needs: [build-wheels, build-sdist]
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write  # For trusted publishing

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Combine artifacts
      run: |
        mkdir -p dist/
        cp wheels-*/*.whl dist/
        cp sdist/*.tar.gz dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

  # Create GitHub release assets
  create-release-assets:
    name: Create release assets
    needs: [build-wheels, build-sdist]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create release archive
      run: |
        # Create source archive with headers
        tar -czf fincraftr-${{ github.ref_name }}-headers.tar.gz \
          cpp/include/ \
          CMakeLists.txt \
          cmake/ \
          vcpkg.json \
          README.md \
          LICENSE

    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          fincraftr-${{ github.ref_name }}-headers.tar.gz
          wheels-*/*.whl
          sdist/*.tar.gz
